inspect(Adult1[1:2])
source('~/Grado Ingeniería Informática/G.I.I_2018/CS-4th-year/Scientific Computation Laboratory/Modules/4. Association rules/Reglas_AsociacionR_1_AdultAdultUCI.R')
library(arules)
data("Adult")
length(Adult)
dim(Adult)
Adult
inspect(Adult[1:2])
data("Adult")
rules <- apriori(Adult,  parameter = list(supp = 0.5, conf = 0.9,
target = "rules"))
summary(rules)
inspect(rules)
## rules <- apriori(Adult,  parameter = list(supp = 0.5, conf = 0.9,minlen=2))
## rules <- apriori(Adult,  parameter = list(supp = 0.5, conf = 0.9), appearance = list(items = c("income=small", "sex=Male"))
## rules <- apriori(Adult,  parameter = list(supp = 0.5, conf = 0.9), appearance = list(none = c("income=small", "sex=Male")))
data("AdultUCI")
View(AdultUCI)
str(AdultUCI)
AdultUCI$fnlwgt <-NULL
## o AdultUCI[["fnlwgt"]] <- NULL
AdultUCI$`education-num` <- NULL
# ejemplo de funcionamiento de cut y ordered
v <- 1:100
v2 <- cut(v,c(0,25,50,75,100),labels=c("bajo","medio","alto","muyalto"))
?ordered
v3 <- ordered(v2)
AdultUCI$age <- ordered(cut(AdultUCI[[ "age"]], c(15,25,45,65,100)),
labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[[ "hours-per-week"]] <- ordered(cut(AdultUCI[[ "hours-per-week"]],
c(0,25,40,60,168)),
labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[[ "capital-gain"]] <- ordered(cut(AdultUCI[[ "capital-gain"]],
c(-Inf,0,median(AdultUCI[[ "capital-gain"]][AdultUCI[[ "capital-gain"]]>0]),
Inf)), labels = c("None", "Low", "High"))
AdultUCI[[ "capital-loss"]] <- ordered(cut(AdultUCI[[ "capital-loss"]],
c(-Inf,0, median(AdultUCI[[ "capital-loss"]][AdultUCI[[ "capital-loss"]]>0]),
Inf)), labels = c("None", "Low", "High"))
reg <- apriori(AdultUCI)
inspect(head(reg))
Adult1 <- as(AdultUCI, "transactions")
class(Adult1)
length(Adult1)
dim(Adult1)
Adult1
inspect(Adult1[1:2])
data("Adult")
class(Adult)
length(Adult)
dim(Adult)
Adult
inspect(Adult[1:2])
library(arules)
library(arulesViz)
data(Groceries)
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
rules
inspect(head(rules))
plot(rules)
library(colorspace)
plot(rules, control = list(col=sequential_hcl(100)))
plot(rules, col=sequential_hcl(100))
plot(rules, col=grey.colors(50, alpha =.8))
## plot(rules, engine = "htmlwidget")
subrules <- subset(rules, lift>8)
subrules
plot(subrules, method="matrix")
plot(subrules, method="matrix", engine = "3d")
plot(subrules, method="matrix", shading=c("lift", "confidence"))
## plot(subrules, method="matrix", engine="interactive")
## plot(subrules, method="matrix", engine="htmlwidget")
## plot(subrules, method="grouped matrix")
## plot(subrules, method="grouped matrix",
##      col = grey.colors(10),
##      gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
subrules2 <- sample(subrules, 5)
plot(subrules2, method="graph")
plot(subrules2, method="graph",
nodeCol = grey.colors(10), edgeCol = grey(.7), alpha = 1)
plot(subrules2, method="graph", engine="graphviz")
## plot(subrules2, method="graph", engine="htmlwidget")
## plot(subrules2, method="graph", engine="htmlwidget",
##      igraphLayout = "layout_in_circle")
rules <- apriori(Groceries, parameter=list(sup=0.01 , conf=0.1))
rules
Rules1 <- head(sort(rules , by="lift") , 5)
inspect(head(Rules1))
Rules2 <- rules[quality(rules)$confidence > 0.5]
inspect(head(Rules2))
out1=as(Rules2,'data.frame')
plot(out1)
View(out1)
saveAsGraph(head(sort(Rules2, by="lift"),1000), file="rules.graphml")
library('arules')
library('arulesViz')
library('repmis')
source_data("http://www.rdatamining.com/data/titanic.raw.rdata?attredirects=0&d=1")
R1 <- apriori(titanic.raw,
control = list(verbose=FALSE),
parameter = list(minlen=2, supp=0.005, conf=0.8))
R1_no_survived  <- subset(R1, items %in% "Survived=No")
inspect(head(R1_no_survived))
lhs(R1_no_survived[1])
inspect(lhs(R1_no_survived[1]))
inspect(rhs(R1_no_survived[1]))
class(lhs(R1_no_survived[1]))
write(R1_no_survived, file = "reglas1_titanic.csv",
sep = ",", quote = TRUE, row.names = FALSE)
library(pmml)
### save rules as PMML
write.PMML(R1_no_survived, file = "R1_no_survived.xml")
### read rules back
reglas2 <- read.PMML("R1_no_survived.xml")
R1_no_survived_df <- as(R1, "data.frame")
str(R1_no_survived_df)
rules <- apriori(titanic.raw, parameter = list(support = 0.5))
is.significant(rules, titanic.raw)
inspect(rules[is.significant(rules, titanic.raw)])
## mi.dataset$edad <- mi.dataset$edad<18
## d$height <- discretize( mi.dataset$edad, method = "frequency", 4)
## AdultUCI <- lapply(mi.dataset, function(x){as.factor(x)})
subrules = R1[quality(R1)$confidence > 0.8];
subrules
R1Support = quality(R1)$support
subsetR1 <- which(colSums(is.subset(R1, R1)) > 1) # get subset rules in vector
length(subsetR1)
R1_no_redundantes <- R1[-subsetR1] # remove subset rules.
R1_no_redundantes
R1_no_redundantes_1 <- R1[-is.redundant((R1))]
R1_no_redundantes_1
itemFrequencyPlot(items(R1_no_survived), topN=30, cex.names=.6)
data(Adult)
itemFrequencyPlot(Adult, support = 0.1, cex.names=0.8)
itemFrequencyPlot(Adult, topN=10, type="absolute", main="Item Frequency")
mi.itemsets = eclat(Adult, parameter = list(support = 0.05), control = list(verbose=FALSE))
# Obengo los 1-itemsets
itemsets1 = mi.itemsets[size(items(mi.itemsets)) == 1];
saveAsGraph(sort(R1_no_redundantes_1, by = "lift"), file = "R1_no_redundantes_1.graphml")
library(arules)
lastfm <- read.csv("lastfm.csv")
lastfm[1:20,]
length(lastfm$user)   ## 289,955 filas
class(lastfm$user)
# Necesitamos convertir este atributo a factor
# para poder analizarlo con paquete {\tt arules}
lastfm$user <- factor(lastfm$user)
# levels(lastfm$user)  ## 15,000 users
# levels(lastfm$artist)  ## 1,004 artists
reglas1 <- apriori(lastfm,parameter=list(support=.01, confidence=.5))
inspect(reglas1)
lista.musica.por.usuario <- split(x=lastfm[,"artist"],f=lastfm$user)
lista.musica.por.usuario[1:2]
## Eliminar duplicados
lista.musica.por.usuario <- lapply(lista.musica.por.usuario,unique)
# Convertimos en transacciones la lista de música
lista.musica.por.usuario1 <- as(lista.musica.por.usuario,"transactions")
lista.musica.por.usuario[1:5]
#lista.musica.por.usuario2 <- as(lapply(lista.musica.por.usuario, "[[", 1), "transactions")
#lista.musica.por.usuario2
str(lista.musica.por.usuario1)
write(head(lista.musica.por.usuario1))
write(head(lista.musica.por.usuario1),format="single")
itfreq1  <-itemFrequency(lista.musica.por.usuario1)
head(itfreq1)
itemFrequencyPlot(lista.musica.por.usuario1,support=.08,cex.names=1)
reglas2 <- apriori(lista.musica.por.usuario1,parameter=
list(support=.01, confidence=.5))
reglas2
inspect(reglas2)
inspect(subset(reglas2, subset=lift > 1))
inspect(sort(subset(reglas2, subset=lift > 1), by="confidence"))
r1 <-subset(reglas2, subset = lhs %ain%
c("coldplay"))
inspect(r1)
library(arules)
lastfm <- read.csv("lastfm.csv")
lastfm[1:20,]
library(arules)
lastfm <- read.csv("lastfm.csv")
lastfm <- read.csv("lastfm.csv")
library(arules)
lastfm <- read.csv("lastfm.csv")
library(arules)
lastfm <- read_csv("lastfm.csv")
library(readr)
lastfm <- read_csv("lastfm.csv")
library(tm)
library(pdftools)
library(stringr)
library(stringi)
directorio.textos <- file.path("~", "Desktop", "texts_Alz")
directorio.textos
dir(directorio.textos)
#Leer los nombres de los ficheros
list.files <- DirSource(directorio.textos)
# Si es un fichero de texto
# docs <- Corpus(DirSource(directorio.textos))
Rpdf <- readPDF(control = list(text = "-layout"))
# Crear Corpus
docs <- Corpus(URISource(list.files),
readerControl = list(reader = Rpdf))
docs
docs[1]
summary(docs)
options(stringsAsFactors = FALSE)
#Compactar palabras, eliminar patrones, etc.
sub('thank you','thanks', docs,ignore.case = TRUE)
sub('pls','please', docs,ignore.case = TRUE)
micad <- "We'll bes sure to send Jon Katz some kudos on your behalf on tuesday to bes punished"
micad <- sub("to","TO",micad)
micad
micad <- gsub("bes","be",micad)
micad
#lista.cadenas.reemplazar <- c("We'll","Jon Katz", "tuesday")
#lista.nueva.cadenas <- c("We will","J.K.", "Tuesday")
#micad <- mgsub(lista.cadenas.reemplazar,lista.nueva.cadenas,micad)
#micad
#Compactar palabras, eliminar patrones, etc.
micad <- "We'll be sure,  we'll be, to send Jon Katz some kudos on your behalf on tuesday to bes punished"
gsub('we\'ll','we are',micad,ignore.case = TRUE)
gsub('[[:punct:]]','',textos$text,ignore.case = TRUE)
#meses <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
#num.meses <- 1:12
#textos$month <- mgsub(meses,num.meses,textos$month)
#textos$the.date <- paste(textos$date,textos$month,textos$year,sep='-')
stri_count(head(textos$text),fixed = 'is')
stri_detect(head(textos$text),fixed = 'is')
# Detectar ciertos patrones
patrones <- with(textos,str_detect(textos$text,'sorry')&str_detect(textos$text,'problem') )
textos[patrones,5]
